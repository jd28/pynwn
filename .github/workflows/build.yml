name: ci

on:
  push:
  pull_request:
  release:
    types:
      - published

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      VCPKG_ROOT: vcpkg/
      vcpkg-tag: "2022.03.10"
    strategy:
      fail-fast: false
      matrix:
        os: [macos-11, ubuntu-20.04, windows-2019]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: macOS - install non-vcpkg dependencies
        if: matrix.os == 'macos-11'
        env:
          HOMEBREW_NO_ANALYTICS: "ON"
          HOMEBREW_NO_AUTO_UPDATE: "ON"
          HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK: "ON"
          HOMEBREW_NO_INSTALL_CLEANUP: "ON"
        run: |
          brew install pkg-config automake ninja libtool zlib

      - name: macOS|windows - cache vcpkg
        if: matrix.os == 'macos-11' || matrix.os == 'windows-2019'
        id: cache-vcpkg
        uses: actions/cache@v2
        env:
          cache-name: cache-vcpgk
        with:
          path: |
            ${{ github.workspace }}/vcpkg
            ${{ github.workspace }}/build/vcpkg_installed
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.vcpkg-tag }}-${{ hashFiles('vcpkg.json') }}

      - name: macOS|windows - download vcpkg
        if: (matrix.os == 'macos-11' || matrix.os == 'windows-2019') && steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/microsoft/vcpkg ${{ github.workspace }}/vcpkg || true
          pushd vcpkg
          git checkout --force ${{ env.vcpkg-tag }}
          popd

      - name: macOS - bootstrap vcpkg
        if: matrix.os == 'macos-11' && steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: vcpkg/bootstrap-vcpkg.sh

      - name: windows - bootstrap vcpkg
        if: matrix.os == 'windows-2019' && steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: vcpkg/bootstrap-vcpkg.bat

      - name: all - build wheels
        uses: pypa/cibuildwheel@v2.3.1

      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: vcpkg-logs
          path: ${{env.VCPKG_ROOT}}/buildtrees/**/*.log

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  build_docs:
    name: Build docs
    needs: [build_wheels]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - run: |
        pip install dist/pynwn-0.1.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl
        pushd ${{ github.workspace }}/docs
        pip install -r requirements.txt
        make html
        popd

      - name: deploy docs to github pages
        if: github.event_name == 'push'
        uses: JamesIves/github-pages-deploy-action@v4.3.3
        with:
          branch: gh-pages
          folder: "${{ github.workspace }}/docs/_build/html"
          clean: true


  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-20.04
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
          # To test: repository_url: https://test.pypi.org/legacy/
